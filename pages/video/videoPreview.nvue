<template>
	<view class="container">
		<view class="titleBox">
			<image class="leftArrow" src="../../static/video/leftArror.png" mode="widthFix" @tap="toWaterMark()"></image>
			<view class="contentText">
				<text style="color: #010101;font-size: 32upx;margin-right: 20upx;" @tap="toSmallVideo()">视频预览</text>
			</view>
			<text class="titleImage" @click="publishVideo()">发布</text>
		</view>
		<list @loadmore="getData()" :loadmoreoffset="wHeight*3" :show-scrollbar="false" :pagingEnabled="true" :scrollable="true">
			<cell v-for="(item,i) in dataList" :key="i">
				<div class="item" :style="boxStyle">
					<jVideo v-if="Math.abs(k-i)<=1" :state="item.state" :src="item.src" :boxStyle="boxStyle"></jVideo>
					<view class="videoHover" v-if="1" @click="tapVideoHover(item.state,$event,i)" :style="boxStyle">
						<image v-if="item.state=='pause'" class="playState" src="../../static/video/play.png"></image>
					</view>
					<view class="userInfo" @appear="k=i">
						<view class="like" @click="cLike(item.video_id,item.like);item.like=!item.like">
							<text style="display: none;" class="likeNum" :class="{'likeNumActive':item.like}"></text>
						</view>
						<view class="comment" @click="toComment(i)">
							<text style="color: #FFFFFF;"></text>
						</view>
					</view>
					<view class="content">
						<text class="userName">{{item.title}}</text>
					</view>
				</div>
			</cell>
		</list>
	</view>
</template>
<script>
	import {
		serverUrl
	} from '@/utils/pathSetting/constPath.js'
	const dom = weex.requireModule('dom');
	const BindingX = uni.requireNativePlugin('bindingx');
	import jVideo from './components/j-video.nvue';
	export default {
		components: {
			jVideo
		},
		data() {
			return {
				showBottom: false,
				menulist: ['同城', '推荐'],
				currPage: 1,
				dataList: [],
				scrollTop: 0,
				oldScrollTop: 0,
				wHeight: 0,
				boxStyle: {
					'height': '0',
					'width': '750upx',
				},
				k: 0,
				playIngIds: [],
				ready: false,
				videoId: '',
				srcUrl: "",
				usrId: "",
				videoInforData: {},
				uploadVideoSign:''
			}
		},
		watch: {
			k(k, old_k) {
				this.dataList[k].state = 'play'
				this.dataList[old_k].state = 'stop'
			},
		},
		onLoad(option) {
			console.log('option', option)
			this.srcUrl = option.src;
			this.uploadVideoSign = option.uploadVideoSign;
			this.dataList.push({
				src: option.src,
				state: 'pause',
			})
			this.getData(e => {
				this.dataList[0].state = 'play';
			});
			this.$nextTick(() => {
				this.tapVideoHover()
			})
		},
		onShow() {
			this.wHeight = uni.getSystemInfoSync().windowHeight;
			this.boxStyle.height = this.wHeight;
			this.getUserId(); //獲取用戶id
			if (uni.getStorageSync('videoInforData')) {
				console.log('hhh', uni.getStorageSync('videoInforData'))
				this.videoInforData = uni.getStorageSync('videoInforData')
			}
		},
		onHide() {
			this.dataList[this.k].state = 'pause';
		},
		methods: {
			//上传本地视频发送的数据请求
			uploadVideoResource(){
				const title = this.videoInforData.title == undefined ? '' : this.videoInforData.title;
				const position = this.videoInforData.title == undefined ? '' : this.videoInforData.position;
				const pic = this.videoInforData.url+"?spm=qipa250&x-oss-process=video/snapshot,t_0,f_jpg,w_500,h_900,m_fast"
				uni.request({
					url: serverUrl,
					dataType: 'json', //默认 json格式
					data: {
						"action": "publishvideo",
						"url": this.videoInforData.url,
						"title": title,
						"position": position,
						"pic": pic,
						"usrId": this.videoInforData.usrId,
						"mdlId": this.videoInforData.mdlId
					},
					success: (res) => {
						if (res.data.result == 'suc') {
							uni.showToast({
								title: '成功上传',
								icon: 'none'
							})
							this.dataList[this.k].state = 'pause';
							setTimeout(() => {
								if (this.videoInforData.mdlId == '-1') {
									uni.switchTab({
										url: "./video"
									})
								} else {
									uni.navigateTo({
										url: "./vertical-swiper"
									})
								}
							}, 1000)
						} else {
							uni.showToast({
								icon: 'none',
								title: response.data.msg
							})
						}
					}
				})
			},
			//去除水印视频之后发送的数据请求
			waterMarkResource(){
				const title = this.videoInforData.title == undefined ? '' : this.videoInforData.title;
				const position = this.videoInforData.title == undefined ? '' : this.videoInforData.position;
				const pic = this.videoInforData.title == undefined ? '' : this.videoInforData.pic;
				uni.request({
					url: serverUrl,
					dataType: 'json', //默认 json格式
					data: {
						"action": "uploadvideofromurl",
						"url": this.videoInforData.url,
						"title": title,
						"position": position,
						"pic": pic,
						"usrId": this.videoInforData.usrId,
						"mdlId": this.videoInforData.mdlId
					},
					success: (res) => {
						console.log('res', res);
						if (res.data.result == 'suc') {
							uni.showToast({
								title: '成功上传',
								icon: 'none'
							})
							this.dataList[this.k].state = 'pause';
							setTimeout(() => {
								if (this.videoInforData.mdlId == '-1') {
									uni.switchTab({
										url: "./video"
									})
								} else {
									uni.navigateTo({
										url: "./vertical-swiper"
									})
								}
							}, 1000)
						} else {
							uni.showToast({
								icon: 'none',
								title: response.data.msg
							})
						}
					}
				})
			},
			getUserId() {
				let userData = uni.getStorageSync('data');
				if (userData) {
					this.usrId = userData.usrId;
				}
			},
			publishVideo() {
				uni.showToast({
					title: '正在上传,请稍后。。。',
					icon: 'none'
				}) 
				if(  this.uploadVideoSign == '990'  ){
					this.uploadVideoResource()
				}else{
					this.waterMarkResource()
				}
			},
			toWaterMark() {
				uni.navigateTo({
					url: './waterMark'
				})
			},
			//去水印界面
			toImageMender() {
				uni.navigateTo({
					url: './waterMark'
				})
			},
			//点击跳转发布短视频
			topublicVideo() {
				uni.navigateTo({
					url: './publicVideo'
				})
			},
			toSmallVideo() {
				uni.switchTab({
					url: "./video"
				})
			},
			choosemenu(menuindex) {
				this.activeindex = menuindex;
				if (this.activeindex == 0) {
					uni.navigateTo({
						url: "./video"
					})
				}
				setTimeout(() => {
					this.changeline()
				}, 100) //做一个短暂的延迟保证选中的tab是用户点击的tab
			},
			cLike(video_id, sss) {
				const video = this.dataList[this.k];
				sss ? video.like_n -= 1 : video.like_n += 1;
			},
			toComment() {
				uni.showToast({
					title: '抽屉式评论区域，敬请期待',
					icon: 'none'
				})
			},
			back() {
				uni.switchTab({
					url: './video'
				});
			},
			//点击播放&&暂停
			tapVideoHover(state, event, i) {
				// this.k = i;
				if (state == 'play' || state == 'continue') {
					this.dataList[this.k].state = 'pause';
				} else {
					this.dataList[this.k].state = 'continue';
				}
			},
			getData(callback = e => {}) {}
		}
	}
</script>
<style scoped>
	.titleBox {
		position: fixed;
		width: 750rpx;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding-top: 50upx;
		padding-left: 20upx;
		padding-right: 20upx;
		height: 150upx;
		background-color: #FFFFFF;
		z-index: 2;
	}

	.leftArrow {
		color: #010101;
		width: 60upx;
		height: 60upx;
		font-size: 60upx;
	}

	.titleImage {
		text-align: center;
		width: 120upx;
		height: 60upx;
		line-height: 60upx;
		background-color: #ce2f69;
		border-radius: 40upx;
		color: #FFFFFF;
		font-size: 28upx;
	}

	.contentText {
		flex-direction: row;
		justify-content: center;
		align-items: center;
	}

	.menu-box {
		width: 15%;
		height: 80rpx;
		font-size: 16px;
		color: #FFFFFF;
	}

	.tabtrue {
		font-weight: bold
	}

	.bottom_line {
		width: 40rpx;
		height: 4rpx;
		background-color: #fff;
		position: absolute;
		bottom: 8rpx;
		/* transition: all .2s linear; */
	}

	.back {
		position: absolute;
		top: -150upx;
		width: 100%;
		height: 100upx;
		top: 150upx;
		color: #FFFFFF;
		flex-direction: row;
		align-items: center;
		justify-content: center;
	}

	.playState {
		width: 80upx;
		height: 80upx;
	}

	.container {
		flex: 1;
		background-color: #eeeeee;
	}

	.item {
		width: 750upx;
		background-color: #000000;
		align-items: center;
		justify-content: center;
		position: relative;
		top: 0;
		left: 0;
		z-index: 99
	}

	.videoHover {
		position: absolute;
		top: 0;
		left: 0;
		flex: 1;
		background-color: rgba(0, 0, 0, 0.1);
		justify-content: center;
		align-items: center;
	}

	.noData {
		width: 100upx;
		height: 100upx;
	}

	.userInfo {
		position: absolute;
		bottom: 250upx;
		right: 15px;
		justify-content: center;
		align-items: center;
		flex-direction: column;
	}

	.userAvatar {
		border-radius: 500%;
		margin-bottom: 15px;
		border-style: solid;
		border-width: 2px;
		border-color: #ffffff;
	}

	.userAvatar {
		width: 90upx;
		height: 90upx;
	}

	.likeIco,
	.shareIco,
	.commentIco {
		width: 60upx;
		height: 60upx;
		margin-top: 15px;
	}

	.likeNum,
	.commentNum,
	.shareTex {
		color: #ffffff;
		font-size: 30upx;
		text-align: center;
		margin: 5px;
	}

	.likeNumActive {
		color: red;
	}

	.content {
		width: 720upx;
		z-index: 99;
		position: absolute;
		bottom: 50upx;
		justify-content: center;
		padding: 15upx;
		flex-direction: column;
		justify-content: flex-start;
		color: #ffffff;
	}

	.userName {
		font-size: 30upx;
		color: #ffffff;
	}

	.words {
		margin-top: 10upx;
		font-size: 30upx;
		color: #ffffff;
	}
</style>
